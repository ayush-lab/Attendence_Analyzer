{
  "version": 3,
  "names": [
    "SVG",
    "props",
    "rectSize",
    "legendCellSize",
    "space",
    "startDate",
    "Date",
    "endDate",
    "rectProps",
    "rectRender",
    "legendRender",
    "value",
    "weekLabels",
    "monthLabels",
    "panelColors",
    "other",
    "useState",
    "gridNum",
    "setGridNum",
    "leftPad",
    "setLeftPad",
    "topPad",
    "setTopPad",
    "svgRef",
    "React",
    "createRef",
    "nums",
    "useMemo",
    "numberSort",
    "Object",
    "keys",
    "map",
    "item",
    "parseInt",
    "data",
    "formatData",
    "useEffect",
    "current",
    "width",
    "clientWidth",
    "Math",
    "floor",
    "initStartDate",
    "isValidDate",
    "getDay",
    "getTime",
    "oneDayTime",
    "newDate",
    "Array",
    "_",
    "idx",
    "cidx",
    "dayProps",
    "key",
    "fill",
    "height",
    "x",
    "y",
    "currentDate",
    "date",
    "getDateToString",
    "dataProps",
    "row",
    "column",
    "index",
    "length",
    "existColor",
    "count",
    "elm",
    "isValidElement"
  ],
  "sources": [
    "../src/SVG.tsx"
  ],
  "sourcesContent": [
    "import React, { useEffect, useMemo, useState } from 'react';\nimport { LabelsWeek } from './LabelsWeek';\nimport { LabelsMonth } from './LabelsMonth';\nimport { Rect } from './Rect';\nimport { formatData, getDateToString, existColor, numberSort, isValidDate, oneDayTime } from './utils';\nimport Legend, { LegendProps } from './Legend';\n\nexport type HeatMapValue = {\n  date: string;\n  content: string | string[] | React.ReactNode;\n  count: number;\n};\n\nexport type RectProps<T = SVGRectElement> = React.SVGProps<T>;\n\nexport interface SVGProps extends React.SVGProps<SVGSVGElement> {\n  startDate?: Date;\n  endDate?: Date;\n  rectSize?: number;\n  legendCellSize?: number;\n  space?: number;\n  rectProps?: RectProps;\n  legendRender?: LegendProps['legendRender'];\n  rectRender?: <E = SVGRectElement>(\n    data: E & { key: number },\n    valueItem: HeatMapValue & {\n      column: number;\n      row: number;\n      index: number;\n    },\n  ) => React.ReactElement | void;\n  value?: Array<HeatMapValue>;\n  weekLabels?: string[] | false;\n  monthLabels?: string[] | false;\n  panelColors?: Record<number, string>;\n}\n\nexport default function SVG(props: SVGProps) {\n  const {\n    rectSize = 11,\n    legendCellSize = 11,\n    space = 2,\n    startDate = new Date(),\n    endDate,\n    rectProps,\n    rectRender,\n    legendRender,\n    value = [],\n    weekLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    monthLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    panelColors = { 0: '#EBEDF0', 8: '#7BC96F', 4: '#C6E48B', 12: '#239A3B', 32: '#196127' },\n    ...other\n  } = props || {};\n  const [gridNum, setGridNum] = useState(0);\n  const [leftPad, setLeftPad] = useState(!!weekLabels ? 28 : 5);\n  const [topPad, setTopPad] = useState(!!monthLabels ? 20 : 5);\n  const svgRef = React.createRef<SVGSVGElement>();\n  const nums = useMemo(() => numberSort(Object.keys(panelColors).map((item) => parseInt(item, 10))), [panelColors]);\n  const data = useMemo(() => formatData(value), [value]);\n  useEffect(() => setLeftPad(!!weekLabels ? 28 : 5), [weekLabels]);\n  useEffect(() => {\n    if (svgRef.current) {\n      const width = svgRef.current.clientWidth - leftPad || 0;\n      setGridNum(Math.floor(width / (rectSize + space)) || 0);\n    }\n  }, [rectSize, svgRef, space, leftPad]);\n\n  useEffect(() => {\n    setTopPad(!!monthLabels ? 20 : 5);\n  }, [monthLabels]);\n\n  const initStartDate = useMemo(() => {\n    if (isValidDate(startDate)) {\n      return !startDate.getDay() ? startDate : new Date(startDate.getTime() - startDate.getDay() * oneDayTime);\n    } else {\n      const newDate = new Date();\n      return new Date(newDate.getTime() - newDate.getDay() * oneDayTime);\n    }\n  }, [startDate]);\n\n  return (\n    <svg ref={svgRef} {...other}>\n      {legendCellSize !== 0 && (\n        <Legend\n          legendRender={legendRender}\n          panelColors={panelColors}\n          rectSize={rectSize}\n          legendCellSize={legendCellSize}\n          leftPad={leftPad}\n          topPad={topPad}\n          space={space}\n        />\n      )}\n      <LabelsWeek weekLabels={weekLabels} rectSize={rectSize} space={space} topPad={topPad} />\n      <LabelsMonth\n        monthLabels={monthLabels}\n        rectSize={rectSize}\n        space={space}\n        leftPad={leftPad}\n        colNum={gridNum}\n        startDate={initStartDate}\n      />\n      <g transform={`translate(${leftPad}, ${topPad})`}>\n        {gridNum > 0 &&\n          [...Array(gridNum)].map((_, idx) => {\n            return (\n              <g key={idx} data-column={idx}>\n                {[...Array(7)].map((_, cidx) => {\n                  const dayProps: RectProps = {\n                    ...rectProps,\n                    key: cidx,\n                    fill: '#EBEDF0',\n                    width: rectSize,\n                    height: rectSize,\n                    x: idx * (rectSize + space),\n                    y: (rectSize + space) * cidx,\n                  };\n                  const currentDate = new Date(initStartDate.getTime() + oneDayTime * (idx * 7 + cidx));\n                  const date = getDateToString(currentDate);\n                  const dataProps = {\n                    ...data[date],\n                    date: date,\n                    row: cidx,\n                    column: idx,\n                    index: idx * 7 + cidx,\n                  };\n\n                  if (endDate instanceof Date && currentDate.getTime() > endDate.getTime()) {\n                    return null;\n                  }\n                  if (date && data[date] && panelColors && Object.keys(panelColors).length > 0) {\n                    dayProps.fill = existColor(data[date].count || 0, nums, panelColors);\n                  } else if (panelColors && panelColors[0]) {\n                    dayProps.fill = panelColors[0];\n                  }\n                  if (rectRender && typeof rectRender === 'function') {\n                    const elm = rectRender({ ...dayProps, key: cidx }, dataProps);\n                    if (elm && React.isValidElement(elm)) {\n                      return elm;\n                    }\n                  }\n                  return (\n                    <Rect\n                      {...dayProps}\n                      data-date={date}\n                      data-index={dataProps.index}\n                      data-row={dataProps.row}\n                      data-column={dataProps.column}\n                    />\n                  );\n                })}\n              </g>\n            );\n          })}\n      </g>\n    </svg>\n  );\n}\n"
  ],
  "mappings": "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"
}