{
  "version": 3,
  "names": [
    "LabelsMonth",
    "monthLabels",
    "rectSize",
    "space",
    "leftPad",
    "colNum",
    "startDate",
    "data",
    "useMemo",
    "Array",
    "map",
    "_",
    "idx",
    "date",
    "Date",
    "getTime",
    "oneDayTime",
    "month",
    "getMonth",
    "col",
    "index",
    "day",
    "getDate",
    "monthStr",
    "filter",
    "Boolean",
    "item",
    "list"
  ],
  "sources": [
    "../src/LabelsMonth.tsx"
  ],
  "sourcesContent": [
    "import React, { Fragment, useMemo } from 'react';\nimport { oneDayTime } from './utils';\nimport { SVGProps } from './SVG';\n\nexport interface LablesMonthProps extends React.SVGProps<SVGTextElement> {\n  monthLabels: SVGProps['monthLabels'];\n  rectSize: SVGProps['rectSize'];\n  space: SVGProps['space'];\n  leftPad: number;\n  colNum: number;\n  startDate: SVGProps['startDate'];\n}\n\nexport const LabelsMonth = ({\n    monthLabels = [],\n    rectSize = 0,\n    space = 0,\n    leftPad = 0,\n    colNum = 0,\n    startDate,\n  }: LablesMonthProps) => {\n  const data = useMemo(() => {\n    if (monthLabels === false || colNum < 1) return [];\n    return [...Array(colNum * 7)]\n      .map((_, idx) => {\n        if ((idx / 7) % 1 === 0) {\n          const date = new Date(startDate!.getTime() + idx * oneDayTime);\n          const month = date.getMonth();\n          return { col: idx / 7, index: idx, month, day: date.getDate(), monthStr: monthLabels[month], date };\n        }\n        return null;\n      })\n      .filter(Boolean)\n      .filter((item, idx, list) => list[idx - 1] && list[idx - 1]!.month !== item!.month);\n  }, [colNum, monthLabels, startDate]);\n\n  return useMemo(\n    () => (\n      <Fragment>\n        {[...data].map((item, idx) => {\n          return (\n            <text\n              key={idx}\n              data-size={rectSize}\n              x={leftPad + space + space}\n              y={15}\n              dx={item!.col * (rectSize + space)}\n              textAnchor='start'\n            >\n              {item!.monthStr}\n            </text>\n          );\n        })}\n      </Fragment>\n    ),\n    [data, leftPad, rectSize, space],\n  );\n};\n"
  ],
  "mappings": ";;;;;;;;;AAAA;AACA;AAAqC;AAY9B,IAAMA,WAAW,GAAG,SAAdA,WAAW,OAOE;EAAA,4BANtBC,WAAW;IAAXA,WAAW,iCAAG,EAAE;IAAA,qBAChBC,QAAQ;IAARA,QAAQ,8BAAG,CAAC;IAAA,kBACZC,KAAK;IAALA,KAAK,2BAAG,CAAC;IAAA,oBACTC,OAAO;IAAPA,OAAO,6BAAG,CAAC;IAAA,mBACXC,MAAM;IAANA,MAAM,4BAAG,CAAC;IACVC,SAAS,QAATA,SAAS;EAEX,IAAMC,IAAI,GAAG,IAAAC,cAAO,EAAC,YAAM;IACzB,IAAIP,WAAW,KAAK,KAAK,IAAII,MAAM,GAAG,CAAC,EAAE,OAAO,EAAE;IAClD,OAAO,oCAAII,KAAK,CAACJ,MAAM,GAAG,CAAC,CAAC,EACzBK,GAAG,CAAC,UAACC,CAAC,EAAEC,GAAG,EAAK;MACf,IAAKA,GAAG,GAAG,CAAC,GAAI,CAAC,KAAK,CAAC,EAAE;QACvB,IAAMC,IAAI,GAAG,IAAIC,IAAI,CAACR,SAAS,CAAES,OAAO,EAAE,GAAGH,GAAG,GAAGI,iBAAU,CAAC;QAC9D,IAAMC,KAAK,GAAGJ,IAAI,CAACK,QAAQ,EAAE;QAC7B,OAAO;UAAEC,GAAG,EAAEP,GAAG,GAAG,CAAC;UAAEQ,KAAK,EAAER,GAAG;UAAEK,KAAK,EAALA,KAAK;UAAEI,GAAG,EAAER,IAAI,CAACS,OAAO,EAAE;UAAEC,QAAQ,EAAEtB,WAAW,CAACgB,KAAK,CAAC;UAAEJ,IAAI,EAAJA;QAAK,CAAC;MACrG;MACA,OAAO,IAAI;IACb,CAAC,CAAC,CACDW,MAAM,CAACC,OAAO,CAAC,CACfD,MAAM,CAAC,UAACE,IAAI,EAAEd,GAAG,EAAEe,IAAI;MAAA,OAAKA,IAAI,CAACf,GAAG,GAAG,CAAC,CAAC,IAAIe,IAAI,CAACf,GAAG,GAAG,CAAC,CAAC,CAAEK,KAAK,KAAKS,IAAI,CAAET,KAAK;IAAA,EAAC;EACvF,CAAC,EAAE,CAACZ,MAAM,EAAEJ,WAAW,EAAEK,SAAS,CAAC,CAAC;EAEpC,OAAO,IAAAE,cAAO,EACZ;IAAA,oBACE,qBAAC,eAAQ;MAAA,UACN,oCAAID,IAAI,EAAEG,GAAG,CAAC,UAACgB,IAAI,EAAEd,GAAG,EAAK;QAC5B,oBACE;UAEE,aAAWV,QAAS;UACpB,CAAC,EAAEE,OAAO,GAAGD,KAAK,GAAGA,KAAM;UAC3B,CAAC,EAAE,EAAG;UACN,EAAE,EAAEuB,IAAI,CAAEP,GAAG,IAAIjB,QAAQ,GAAGC,KAAK,CAAE;UACnC,UAAU,EAAC,OAAO;UAAA,UAEjBuB,IAAI,CAAEH;QAAQ,GAPVX,GAAG,CAQH;MAEX,CAAC;IAAC,EACO;EAAA,CACZ,EACD,CAACL,IAAI,EAAEH,OAAO,EAAEF,QAAQ,EAAEC,KAAK,CAAC,CACjC;AACH,CAAC;AAAC"
}