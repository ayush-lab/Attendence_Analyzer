import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["rectSize", "legendCellSize", "space", "startDate", "endDate", "rectProps", "rectRender", "legendRender", "value", "weekLabels", "monthLabels", "panelColors"];
import React, { useEffect, useMemo, useState } from 'react';
import { LabelsWeek } from './LabelsWeek';
import { LabelsMonth } from './LabelsMonth';
import { Rect } from './Rect';
import { formatData, getDateToString, existColor, numberSort, isValidDate, oneDayTime } from './utils';
import Legend from './Legend';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default function SVG(props) {
  var _ref = props || {},
    {
      rectSize = 11,
      legendCellSize = 11,
      space = 2,
      startDate = new Date(),
      endDate,
      rectProps,
      rectRender,
      legendRender,
      value = [],
      weekLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      monthLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      panelColors = {
        0: '#EBEDF0',
        8: '#7BC96F',
        4: '#C6E48B',
        12: '#239A3B',
        32: '#196127'
      }
    } = _ref,
    other = _objectWithoutPropertiesLoose(_ref, _excluded);
  var [gridNum, setGridNum] = useState(0);
  var [leftPad, setLeftPad] = useState(!!weekLabels ? 28 : 5);
  var [topPad, setTopPad] = useState(!!monthLabels ? 20 : 5);
  var svgRef = /*#__PURE__*/React.createRef();
  var nums = useMemo(() => numberSort(Object.keys(panelColors).map(item => parseInt(item, 10))), [panelColors]);
  var data = useMemo(() => formatData(value), [value]);
  useEffect(() => setLeftPad(!!weekLabels ? 28 : 5), [weekLabels]);
  useEffect(() => {
    if (svgRef.current) {
      var width = svgRef.current.clientWidth - leftPad || 0;
      setGridNum(Math.floor(width / (rectSize + space)) || 0);
    }
  }, [rectSize, svgRef, space, leftPad]);
  useEffect(() => {
    setTopPad(!!monthLabels ? 20 : 5);
  }, [monthLabels]);
  var initStartDate = useMemo(() => {
    if (isValidDate(startDate)) {
      return !startDate.getDay() ? startDate : new Date(startDate.getTime() - startDate.getDay() * oneDayTime);
    } else {
      var newDate = new Date();
      return new Date(newDate.getTime() - newDate.getDay() * oneDayTime);
    }
  }, [startDate]);
  return /*#__PURE__*/_jsxs("svg", _extends({
    ref: svgRef
  }, other, {
    children: [legendCellSize !== 0 && /*#__PURE__*/_jsx(Legend, {
      legendRender: legendRender,
      panelColors: panelColors,
      rectSize: rectSize,
      legendCellSize: legendCellSize,
      leftPad: leftPad,
      topPad: topPad,
      space: space
    }), /*#__PURE__*/_jsx(LabelsWeek, {
      weekLabels: weekLabels,
      rectSize: rectSize,
      space: space,
      topPad: topPad
    }), /*#__PURE__*/_jsx(LabelsMonth, {
      monthLabels: monthLabels,
      rectSize: rectSize,
      space: space,
      leftPad: leftPad,
      colNum: gridNum,
      startDate: initStartDate
    }), /*#__PURE__*/_jsx("g", {
      transform: "translate(" + leftPad + ", " + topPad + ")",
      children: gridNum > 0 && [...Array(gridNum)].map((_, idx) => {
        return /*#__PURE__*/_jsx("g", {
          "data-column": idx,
          children: [...Array(7)].map((_, cidx) => {
            var dayProps = _extends({}, rectProps, {
              key: cidx,
              fill: '#EBEDF0',
              width: rectSize,
              height: rectSize,
              x: idx * (rectSize + space),
              y: (rectSize + space) * cidx
            });
            var currentDate = new Date(initStartDate.getTime() + oneDayTime * (idx * 7 + cidx));
            var date = getDateToString(currentDate);
            var dataProps = _extends({}, data[date], {
              date: date,
              row: cidx,
              column: idx,
              index: idx * 7 + cidx
            });
            if (endDate instanceof Date && currentDate.getTime() > endDate.getTime()) {
              return null;
            }
            if (date && data[date] && panelColors && Object.keys(panelColors).length > 0) {
              dayProps.fill = existColor(data[date].count || 0, nums, panelColors);
            } else if (panelColors && panelColors[0]) {
              dayProps.fill = panelColors[0];
            }
            if (rectRender && typeof rectRender === 'function') {
              var elm = rectRender(_extends({}, dayProps, {
                key: cidx
              }), dataProps);
              if (elm && /*#__PURE__*/React.isValidElement(elm)) {
                return elm;
              }
            }
            return /*#__PURE__*/_jsx(Rect, _extends({}, dayProps, {
              "data-date": date,
              "data-index": dataProps.index,
              "data-row": dataProps.row,
              "data-column": dataProps.column
            }));
          })
        }, idx);
      })
    })]
  }));
}
//# sourceMappingURL=SVG.js.map