{
  "version": 3,
  "names": [
    "React",
    "useEffect",
    "useMemo",
    "useState",
    "LabelsWeek",
    "LabelsMonth",
    "Rect",
    "formatData",
    "getDateToString",
    "existColor",
    "numberSort",
    "isValidDate",
    "oneDayTime",
    "Legend",
    "SVG",
    "props",
    "rectSize",
    "legendCellSize",
    "space",
    "startDate",
    "Date",
    "endDate",
    "rectProps",
    "rectRender",
    "legendRender",
    "value",
    "weekLabels",
    "monthLabels",
    "panelColors",
    "other",
    "gridNum",
    "setGridNum",
    "leftPad",
    "setLeftPad",
    "topPad",
    "setTopPad",
    "svgRef",
    "createRef",
    "nums",
    "Object",
    "keys",
    "map",
    "item",
    "parseInt",
    "data",
    "current",
    "width",
    "clientWidth",
    "Math",
    "floor",
    "initStartDate",
    "getDay",
    "getTime",
    "newDate",
    "Array",
    "_",
    "idx",
    "cidx",
    "dayProps",
    "key",
    "fill",
    "height",
    "x",
    "y",
    "currentDate",
    "date",
    "dataProps",
    "row",
    "column",
    "index",
    "length",
    "count",
    "elm",
    "isValidElement"
  ],
  "sources": [
    "../src/SVG.tsx"
  ],
  "sourcesContent": [
    "import React, { useEffect, useMemo, useState } from 'react';\nimport { LabelsWeek } from './LabelsWeek';\nimport { LabelsMonth } from './LabelsMonth';\nimport { Rect } from './Rect';\nimport { formatData, getDateToString, existColor, numberSort, isValidDate, oneDayTime } from './utils';\nimport Legend, { LegendProps } from './Legend';\n\nexport type HeatMapValue = {\n  date: string;\n  content: string | string[] | React.ReactNode;\n  count: number;\n};\n\nexport type RectProps<T = SVGRectElement> = React.SVGProps<T>;\n\nexport interface SVGProps extends React.SVGProps<SVGSVGElement> {\n  startDate?: Date;\n  endDate?: Date;\n  rectSize?: number;\n  legendCellSize?: number;\n  space?: number;\n  rectProps?: RectProps;\n  legendRender?: LegendProps['legendRender'];\n  rectRender?: <E = SVGRectElement>(\n    data: E & { key: number },\n    valueItem: HeatMapValue & {\n      column: number;\n      row: number;\n      index: number;\n    },\n  ) => React.ReactElement | void;\n  value?: Array<HeatMapValue>;\n  weekLabels?: string[] | false;\n  monthLabels?: string[] | false;\n  panelColors?: Record<number, string>;\n}\n\nexport default function SVG(props: SVGProps) {\n  const {\n    rectSize = 11,\n    legendCellSize = 11,\n    space = 2,\n    startDate = new Date(),\n    endDate,\n    rectProps,\n    rectRender,\n    legendRender,\n    value = [],\n    weekLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    monthLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    panelColors = { 0: '#EBEDF0', 8: '#7BC96F', 4: '#C6E48B', 12: '#239A3B', 32: '#196127' },\n    ...other\n  } = props || {};\n  const [gridNum, setGridNum] = useState(0);\n  const [leftPad, setLeftPad] = useState(!!weekLabels ? 28 : 5);\n  const [topPad, setTopPad] = useState(!!monthLabels ? 20 : 5);\n  const svgRef = React.createRef<SVGSVGElement>();\n  const nums = useMemo(() => numberSort(Object.keys(panelColors).map((item) => parseInt(item, 10))), [panelColors]);\n  const data = useMemo(() => formatData(value), [value]);\n  useEffect(() => setLeftPad(!!weekLabels ? 28 : 5), [weekLabels]);\n  useEffect(() => {\n    if (svgRef.current) {\n      const width = svgRef.current.clientWidth - leftPad || 0;\n      setGridNum(Math.floor(width / (rectSize + space)) || 0);\n    }\n  }, [rectSize, svgRef, space, leftPad]);\n\n  useEffect(() => {\n    setTopPad(!!monthLabels ? 20 : 5);\n  }, [monthLabels]);\n\n  const initStartDate = useMemo(() => {\n    if (isValidDate(startDate)) {\n      return !startDate.getDay() ? startDate : new Date(startDate.getTime() - startDate.getDay() * oneDayTime);\n    } else {\n      const newDate = new Date();\n      return new Date(newDate.getTime() - newDate.getDay() * oneDayTime);\n    }\n  }, [startDate]);\n\n  return (\n    <svg ref={svgRef} {...other}>\n      {legendCellSize !== 0 && (\n        <Legend\n          legendRender={legendRender}\n          panelColors={panelColors}\n          rectSize={rectSize}\n          legendCellSize={legendCellSize}\n          leftPad={leftPad}\n          topPad={topPad}\n          space={space}\n        />\n      )}\n      <LabelsWeek weekLabels={weekLabels} rectSize={rectSize} space={space} topPad={topPad} />\n      <LabelsMonth\n        monthLabels={monthLabels}\n        rectSize={rectSize}\n        space={space}\n        leftPad={leftPad}\n        colNum={gridNum}\n        startDate={initStartDate}\n      />\n      <g transform={`translate(${leftPad}, ${topPad})`}>\n        {gridNum > 0 &&\n          [...Array(gridNum)].map((_, idx) => {\n            return (\n              <g key={idx} data-column={idx}>\n                {[...Array(7)].map((_, cidx) => {\n                  const dayProps: RectProps = {\n                    ...rectProps,\n                    key: cidx,\n                    fill: '#EBEDF0',\n                    width: rectSize,\n                    height: rectSize,\n                    x: idx * (rectSize + space),\n                    y: (rectSize + space) * cidx,\n                  };\n                  const currentDate = new Date(initStartDate.getTime() + oneDayTime * (idx * 7 + cidx));\n                  const date = getDateToString(currentDate);\n                  const dataProps = {\n                    ...data[date],\n                    date: date,\n                    row: cidx,\n                    column: idx,\n                    index: idx * 7 + cidx,\n                  };\n\n                  if (endDate instanceof Date && currentDate.getTime() > endDate.getTime()) {\n                    return null;\n                  }\n                  if (date && data[date] && panelColors && Object.keys(panelColors).length > 0) {\n                    dayProps.fill = existColor(data[date].count || 0, nums, panelColors);\n                  } else if (panelColors && panelColors[0]) {\n                    dayProps.fill = panelColors[0];\n                  }\n                  if (rectRender && typeof rectRender === 'function') {\n                    const elm = rectRender({ ...dayProps, key: cidx }, dataProps);\n                    if (elm && React.isValidElement(elm)) {\n                      return elm;\n                    }\n                  }\n                  return (\n                    <Rect\n                      {...dayProps}\n                      data-date={date}\n                      data-index={dataProps.index}\n                      data-row={dataProps.row}\n                      data-column={dataProps.column}\n                    />\n                  );\n                })}\n              </g>\n            );\n          })}\n      </g>\n    </svg>\n  );\n}\n"
  ],
  "mappings": "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"
}